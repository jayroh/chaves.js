// Generated by CoffeeScript 1.3.3
(function() {

  describe("Chaves", function() {
    return describe("by default", function() {
      beforeEach(function() {
        loadFixtures('default-list.html');
        this.list = $('#list').chaves();
        this.children = this.list.children();
        this.help = $('.jquery-chaves-help');
        return this.search = $('#search');
      });
      afterEach(function() {
        key.deleteScope('all');
        $('.jquery-chaves-help').remove();
        return $('#list li').attr('class', '').eq('0').addClass('active');
      });
      it("adds 'jquery-chaves' to target element's className", function() {
        return expect(this.list).toHaveClass('jquery-chaves');
      });
      it("adds 'active' to first child element's className", function() {
        return expect(this.children.eq(0)).toHaveClass('active');
      });
      it("builds the help dialog", function() {
        expect($('.jquery-chaves-help h3')).toHaveText('Keyboard Shortcuts');
        expect($('.jquery-chaves-help dl').text()).toContain('kMove selection up.');
        return expect($('.jquery-chaves-help dl').text()).toContain('jMove selection down.');
      });
      describe("when 'j' is pressed", function() {
        describe("once", function() {
          return it("moves 'active' class from first to second child", function() {
            key.triggerKey('j');
            expect(this.children.eq(1)).toHaveClass('active');
            return expect(this.children.eq(0)).not.toHaveClass('active');
          });
        });
        describe("twice", function() {
          return it("moves 'active' to third child", function() {
            key.triggerKey('j');
            key.triggerKey('j');
            return expect(this.children.eq(2)).toHaveClass('active');
          });
        });
        return describe("too many times", function() {
          return it("keeps 'active' on the last child", function() {
            var _i;
            for (_i = 1; _i <= 10; _i++) {
              key.triggerKey('j');
            }
            return expect(this.children.last()).toHaveClass('active');
          });
        });
      });
      describe("when 'k' is pressed", function() {
        beforeEach(function() {
          var _i;
          for (_i = 1; _i <= 6; _i++) {
            key.triggerKey('j');
          }
        });
        describe("once", function() {
          return it("moves 'active' class from last to second child", function() {
            key.triggerKey('k');
            expect(this.children.last().prev()).toHaveClass('active');
            return expect(this.children.last()).not.toHaveClass('active');
          });
        });
        describe("twice", function() {
          return it("moves 'active' to third child", function() {
            key.triggerKey('k');
            key.triggerKey('k');
            return expect(this.children.last().prev().prev()).toHaveClass('active');
          });
        });
        return describe("too many times", function() {
          return it("keeps 'active' on the first child", function() {
            var _i;
            for (_i = 1; _i <= 10; _i++) {
              key.triggerKey('k');
            }
            return expect(this.children.first()).toHaveClass('active');
          });
        });
      });
      describe("after pressing '?'", function() {
        it("toggles the help div", function() {
          key.triggerKey('shift+/');
          expect(this.help).toHaveClass('visible');
          key.triggerKey('shift+/');
          return expect(this.help).not.toHaveClass('visible');
        });
        return describe("and pressing 'esc'", function() {
          return it("hides the help div", function() {
            key.triggerKey('shift+/');
            expect(this.help).toHaveClass('visible');
            key.triggerKey('esc');
            return expect(this.help).not.toHaveClass('visible');
          });
        });
      });
      return describe("when pressing '/'", function() {
        return it("focuses on search", function() {
          key.triggerKey('/');
          return expect(this.search).toBeFocused();
        });
      });
    });
  });

}).call(this);
